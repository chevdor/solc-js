#!/usr/bin/env node

var fs = require('fs-extra');
var path = require('path');
var pkg = require('./package.json');
var helpers = require('./helpers')();

// FIXME: remove annoying exception catcher of Emscripten
//        see https://github.com/chriseth/browser-solidity/issues/167
process.removeAllListeners('uncaughtException');



var cmds = {get: 'get', build:'build', list:'list', version: 'version', info: 'info'};

var yargs = require('yargs')
.usage('Usage: $0 <cmd> [options] [input_file...]')


.example('$0 info', 'Some information about your environment')
.example('$0 version', 'Shows the version of the default compiler')
.example('$0 get --latest', 'Get the latest compiler')
.example('$0 get soljson-v0.1.1+commit.6ff4cd6', 'Get a specific compiler version')
.example('$0 list --releases', 'List available releases')
.example('$0 list --local', 'List compilers you have locally installed')

.command(cmds.info, 'Show some info about solcjs')
.command(cmds.version, 'Show version and exit')

.command(cmds.list, 'List available compilers')
// .option('local', {
//   describe: 'Switch for the local compilers',
//   type: 'boolean'
// })
// .option('release', {
//   describe: 'Switch for the release compilers',
//   type: 'boolean'
// })
// .option('nightly', {
//   describe: 'Switch for the release compilers',
//   type: 'boolean'
// })
// .option('all', {
//   describe: 'Switch for the release compilers',
//   type: 'boolean'
// })
.option('force', {
  describe: 'Force overwritting of local files',
  type: 'boolean',
  default: false
})

.command(cmds.get, 'Fetch one or more compilers')
.alias('latest', 'latest')



.command(cmds.build, 'Build a smart contract')
.option('optimize', {
  describe: 'Enable bytecode optimizer',
  type: 'boolean'
})
.option('bin', {
  alias: 'bin',
  type: 'boolean',
  default: false,
  describe: 'Generate the bytecode of the contract(s)'
})
.option('abi', {
  describe: 'Generate the ABI of the contract(s)',
  type: 'boolean'
})
.option('output-dir', {
  alias: 'o',
  describe: 'Output directory for the contracts. Defaults to ./',
  type: 'string'
})
.option('compiler', {
  alias: 'comp',
  describe: 'Select a specific solidity compiler. CompilersÂ´ location is ~/.soljs/',
  type: 'string'
})


.global([ 'version', 'optimize' ])
.showHelpOnFail(true, 'Specify --help for available options')
.help()
.demand(1, 'You need to provide at least a command.');




var argv = yargs.argv;
var cmd = argv._[0].toLowerCase();


// debug
if (0){
  console.log(argv);
  console.log('cmd ' + cmd);
}


// Check the command
if (!(cmd in cmds))
  helpers.abort('cmd unknown');


var compiler = argv.compiler;
var compilers = require('./compilers')();




if (cmd === 'info'){
  console.log('solcjs version: \t' + pkg.version);
  console.log('Compiler repository: \t' + compilers.repository);
  console.log('Node version: \t\t' + process.version);
  helpers.exit();
}


// Usage:
// solcjs list            => returns the summary of the number of releases online + local
// solcjs list --local    => list the local compilers
// solcjs list --all      => same as solcjs list --releases --nightly
// solcjs list --release => releases only
// solcjs list --nightly  => nightly only

if (cmd === 'list'){
  var opt = {
    local: argv.local,
    release: argv.release,
    nightly: argv.nightly,
    all: argv.all
  };

  console.log(opt);

  var localCompilers;

  if (!opt.local &&
    !opt.release &&
    !opt.commit &&
    !opt.nightly &&
    !opt.all
    ) {                             
    console.log('Summary mode');

  compilers.getListLocal(function(err, res){
    if (err) console.err(err);
    console.log('Summary of your local compilers:');
    console.log('total    : ' + res.data.length);
    console.log('Nightly  : ' + res.getNightlies().length);
    console.log('Releases : ' + res.getReleases().length);

    helpers.exit();
  });


} else if(opt.local) {     
  console.log('Local mode');

  compilers.getListLocal(function(err, res){
    if (err) console.err(err);

    console.log('Your local compilers:');
    for (var item in res.data){
      var i = res.data[item];
      console.log(i.version + ' \t ' + i.path);
    }
    console.log('Total:   ' + res.data.length);

    helpers.exit();
  });


} else {                        
  console.log('Remote mode');
  compilers.getList({
    release: argv.releases, 
    nightly: argv.nightly,
    commit: argv.commit
  }, function(list){
    console.log(list);
    helpers.exit();
  });
}

}









var solc = helpers.getSolidityCompiler(compilers.repository, compiler);
console.log("Using compiler version:" + solc.version());



if (cmd === 'version'){
  console.log(solc.version());
  helpers.exit();
}


// Usage samples:
// solcjs build --bin|abi contract.sol  => At least one must be provided
// solcjs build --bin -o out contrac1.sol contract2.sol                 
// solcjs build --abi --optimize c.sol              

if (cmd === 'build'){
  var files  = argv._.shift();
  var destination = argv['output-dir'] || '.';

  if (!files.length)
    helpers.abort('You must provide at least one file to compile.');

  if (!(argv.bin || argv.abi)) {
    helpers.abort('Invalid option selected');
  }

  var sources = helpers.getSources(files);

  // TODO: to bring back once https://github.com/ethereum/solc-js/issues/22 is clarified
  console.log("Compiling with version: " + solc.version());

  var output = solc.compile({ sources: sources }, argv.optimize ? 1 : 0);

  if (output.errors) {
    // TODO: Remove once the following is clarified:
    // https://github.com/ethereum/solc-js/issues/53
    // only leave the console.error

    if (output.errors[0].indexOf('Warning') > 0) {
      console.log('Compiled with Warnings: ', output.errors);
    } else {
      console.error('Compiled with Errors: ', output.errors);
    }
  } else if (output.warnings) {
    console.warn('Compiled with Warnings: ', output.warnings);
  } else {
    console.log('Compiled with sucess.');
  }

  fs.ensureDirSync (destination);
  for (var contractName in output.contracts) {
    if (argv.bin) {
      fs.writeFileSync(path.join(destination, contractName + '.bin'), output.contracts[contractName].bytecode);
    }

    if (argv.abi) {
      fs.writeFileSync(path.join(destination, contractName + '.abi'), output.contracts[contractName].interface);
    }
  }

}


// Usage:
// solcjs get             => fetch latest release unless already there
// solcjs get ... --force => fetch whatever is requested and overwrite if present
// solcjs get <version1> <version2>,...   => fetch each of the given versions
// solcjs get --releases  => releases only
// solcjs get --nightly   => nightly only
// solcjs get --commit    => commit only
// solcjs get --all       => same as solcjs get --releases --nightly --commit
// 
// //    get --latest      => get the latest
//    get <version>     => get a specific version
//    get --all         => get all the compilers not already there
if (cmd === 'get'){
  if (argv.list) {
    console.log('Getting the list of all versions ...');
    compilers.getList(function (list) {
      list = JSON.parse(list).builds;
      for (var i = list.length - 1; i >= 0; i--) {
        console.log(list[i].version, list[i].path);
      }
      helpers.exit();
    });
  }

  compilers.getList(function (list) {
    list = JSON.parse(list);

    var wanted = null;
    if (requestedVersion) {
      console.log('Requested version: ' + requestedVersion);
      wanted = requestedVersion;
    } else {
      console.log('Requested version: latest release');
      wanted = list.releases[pkg.version.match(/^(\d+\.\d+\.\d+)$/)[1]];
    }

    downloadBinary(wanted, function (file) {
      if (!requestedVersion){
        fs.copy(file, 'soljson.js'); // for backward compatibility
      }
    });
  });
}

